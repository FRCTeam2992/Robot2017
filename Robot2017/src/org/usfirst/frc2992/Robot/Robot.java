// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot;

import edu.wpi.cscore.VideoMode;
import edu.wpi.cscore.VideoMode.PixelFormat;
import edu.wpi.cscore.VideoSource;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;

import org.usfirst.frc.frc2992.MyRobot.lib.mhRobotDrive;
import org.usfirst.frc2992.Robot.Vision.Vision;
import org.usfirst.frc2992.Robot.commands.*;
import org.usfirst.frc2992.Robot.subsystems.*;
import org.usfirst.frc2992.Robot.subsystems.Shifter.shiftMode;

import Autonomous.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	public enum RobotState{
		Robot, Test;
	}

    Command autonomousCommand;
    public static String autoName;
    public static int autoCommandNum;
    
    public static PowerDistributionPanel pdp;
    
    public static RobotState state = RobotState.Robot;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static mhRobotDrive drivelib;
    public static DriveTrain driveTrain;
    public static Climber climber;
    public static Intake intake;
    public static GearSystem gearSystem;
    public static Shifter shift;
    public static CurrentLimit currentlimit;
    public static OutputLog log;
    
    public static RunTest motionprofile;
    
    
    public static Vision vision;
    
   // public static CameraFeeds camerafeed;
    public static int[] cameraRes = {320, 240};
	int width = cameraRes[0];
	int height = cameraRes[1];
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public double cycleNum = 0;
    
    public double secCurrent, maxCurrent, port;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	CameraServer.getInstance().startAutomaticCapture().setResolution(width, height);
    	

    	RobotMap.init();

    	drivelib = new mhRobotDrive(RobotMap.leftmotors, RobotMap.rightmotors);
        driveTrain = new DriveTrain();
        climber = new Climber();
        intake = new Intake();
        gearSystem = new GearSystem();
        shift = new Shifter(shiftMode.normal);
     
        
        currentlimit = new CurrentLimit();
        
        oi = new OI();
        
        //motionprofile = new RunTest();
    	//camerafeed = new CameraFeeds(cameraRes, 20);
    	//camerafeed.init();
    	
    	//vision = new Vision();
        
        try {
			log = new OutputLog();
			log.enable();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        

    	//RunTest.Init("//home//lvuser//path");
        
        //initialize to this in case switch fails at bottom
        autonomousCommand = new DriveStop();
        autoName = "Stand Still";
        autoCommandNum = 0;
    	
    	SmartDashboard.putData(gearSystem);
        SmartDashboard.putData(driveTrain);
        SmartDashboard.putData(climber);
        SmartDashboard.putData(intake);
        
        pdp = new PowerDistributionPanel();
   
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){
    	//vision.Init();
    	
    }

    public void disabledPeriodic() {
    	//vision.Run();
        Scheduler.getInstance().run();
        setAutoMode();
        SmartDashboard.putString("Auto Name", autoName);
		SmartDashboard.putNumber("Gyro Angle", RobotMap.navx.getAngle());
		//camerafeed.run();
    }

    public void autonomousInit() {
    	RobotMap.gearSystemLeftGearHold.setAngle(170);
    	RobotMap.gearSystemRightGearHold.setAngle(0);
    	RobotMap.navx.reset();
    	RobotMap.gyro.reset();
        gearSystem.gear1to2();
        gearSystem.gear2to3();
        gearSystem.gear5to4();
        gearSystem.gear4to3();

        // schedule the autonomous command (example)
    	if (autonomousCommand != null) autonomousCommand.start();
    	//RunTest.Run();
    	/*
    	
	*/
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        //RunTest.follower.run();
        //System.out.println("Left :" + RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	//System.out.println("Right :" + RobotMap.driveTrainRightDriveEncoder.getDistance());
    	//System.out.println("heading" + RobotMap.navx.getYaw());
    	
    	//SmartDashboard.putNumber("Left Encoder", RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	//SmartDashboard.putNumber("Right Encoder", RobotMap.driveTrainRightDriveEncoder.getDistance());

		SmartDashboard.putNumber("Gyro Angle", RobotMap.navx.getAngle());
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        
        // ensures that our ramp and servos are in our starting position at the beginning of teleop
        // avoids an issue where solenoids will automatically try to go to last used position and immediately
        // return to position 3, also gives the servos power to hold position on start, rather than waiting on a button
        gearSystem.gear1to2();
        gearSystem.gear2to3();
        gearSystem.gear5to4();
        gearSystem.gear4to3();
    	RobotMap.gearSystemLeftGearHold.setAngle(170);
    	RobotMap.gearSystemRightGearHold.setAngle(0);
        
        RobotMap.navx.reset();
      
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	SmartDashboard.putNumber("Encoder Left Rate", RobotMap.driveTrainLeftDriveEncoder.getRate());
    	SmartDashboard.putNumber("Encoder Right Rate", RobotMap.driveTrainRightDriveEncoder.getRate());
    	SmartDashboard.putNumber("Encoder Left Distance", RobotMap.driveTrainLeftDriveEncoder.pidGet());
    	SmartDashboard.putNumber("Encoder Right Distance", RobotMap.driveTrainRightDriveEncoder.pidGet());
    	
    	//System.out.println("Left :" + RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	//System.out.println("Right :" + RobotMap.driveTrainRightDriveEncoder.getDistance());
        Scheduler.getInstance().run();
        currentlimit.Loop();
        
        cycleNum++;
		if(cycleNum%20 == 0){
			try {
				log.fileWrite.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if(state == RobotState.Robot){
		try {
			log.Update(CurrentLimit.wholeCurrent);	
			//System.out.println(2);
				
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
		
		SmartDashboard.putNumber("Gyro Angle", RobotMap.navx.getAngle());
        
        SmartDashboard.putNumber(   "IMU_Yaw",              RobotMap.navx.getYaw());
        SmartDashboard.putNumber(   "IMU_CompassHeading",   RobotMap.navx.getCompassHeading());
        /* These functions are compatible w/the WPI Gyro Class, providing a simple  */
        /* path for upgrading from the Kit-of-Parts gyro to the navx MXP            */
        
       // SmartDashboard.putNumber(   "IMU_TotalYaw",         RobotMap.navx.getAngle());
        SmartDashboard.putNumber(   "IMU_YawRateDPS",       RobotMap.navx.getRate());
        
        //camerafeed.run();
    }
    
    public void testInit(){
    	LiveWindow.run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void setAutoMode () {
    	// Read the switch autonomous switches & set auto mode
    	int automode = 0;
    	//do one last check to make sure the buttons are right and auto modes are getting set
    	if (Robot.oi.autoA.get()) {
    		automode += 1;
    	}
    	if (Robot.oi.autoB.get()) {
    		automode += 2;
    	}
    	if (Robot.oi.autoC.get()) {
    		automode += 4;
    	}
    	
    	autoCommandNum = automode;
    	
    	switch (automode) {
    		case 0:	autonomousCommand = new DriveStop();
    				autoName = "Stand Still";
    				break;
    		case 1: autonomousCommand = new AutoMidGear();
    				autoName = "Middle Gear";
    				break;
    		case 2: autonomousCommand = new AutoLeftGearRED();
    				autoName = "Left RED Gear";
    				break;
    		case 3: autonomousCommand = new AutoRightGearRED();
					autoName = "Right RED Gear";
					break;
    		case 4: autonomousCommand = new AutoLeftGearBLUE();
					autoName = "Left BLUE Gear";
					break;
    		case 5: autonomousCommand = new AutoRightGearBLUE();
    				autoName = "Right BLUE Gear";
    				break;
    		case 6:	autonomousCommand = new AutoMidGearFAST();
    				autoName = "GOTTA GO FAST";
    				break;
    		case 7: //autonomousCommand = new AutoMoat();
    				autoName = "";
    		default: autonomousCommand = new DriveStop();
    				autoName = "Default Do Nothing";
    				break;
    	}	
    }
}
