// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot;

import edu.wpi.cscore.VideoSource;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.PowerDistributionPanel;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import java.io.IOException;

import org.usfirst.frc.frc2992.MyRobot.lib.mhRobotDrive;
import org.usfirst.frc2992.Robot.Vision.Vision;
import org.usfirst.frc2992.Robot.commands.*;
import org.usfirst.frc2992.Robot.subsystems.*;

import Autonomous.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {
	
	public enum RobotState{
		Robot, Test;
	}
	
	public static Constants constants;

    Command autonomousCommand;
    
    PowerDistributionPanel pdp;
    
    public static RobotState state = RobotState.Robot;

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static mhRobotDrive drivelib;
    public static DriveTrain driveTrain;
    public static Climber climber;
    public static Intake intake;
    public static GearSystem gearSystem;
    public static CurrentLimit currentlimit;
    public static OutputLog log;
    
    public static RunTest motionprofile;
    
    public static String autoName;
    public static int autoCommandNum;
    
    public static Vision vision;
    

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public double cycleNum = 0;
    
    public double secCurrent, maxCurrent, port;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	CameraServer.getInstance().startAutomaticCapture();
    	
    	constants = new Constants();
    RobotMap.init();
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	drivelib = new mhRobotDrive(RobotMap.leftmotors, RobotMap.rightmotors);
        driveTrain = new DriveTrain();
        climber = new Climber();
        intake = new Intake();
        gearSystem = new GearSystem();
        
        
        if(state == RobotState.Robot){
        currentlimit = new CurrentLimit();
        }

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        //vision = new Vision();

        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        //autonomousCommand = new TestStuff();
        motionprofile = new RunTest();

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        
        try {
			log = new OutputLog();
			log.enable();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
        

    	//RunTest.Init("//home//lvuser//path");
    	
    	//autonomousCommand = new AutoForward();
    	
    	SmartDashboard.putData(gearSystem);
        SmartDashboard.putData(driveTrain);
        SmartDashboard.putData(climber);
        SmartDashboard.putData(intake);
        
        pdp = new PowerDistributionPanel();
   
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    public void disabledPeriodic() {
        Scheduler.getInstance().run();
        setAutoMode();
    }

    public void autonomousInit() {
    	vision.Init();
        // schedule the autonomous command (example)
    	if (autonomousCommand != null) autonomousCommand.start();
    	//RunTest.Run();
    	/*
    	
	*/
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        //RunTest.follower.run();
        System.out.println("Left :" + RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	System.out.println("Right :" + RobotMap.driveTrainRightDriveEncoder.getDistance());
    	
    	SmartDashboard.putNumber("Left Encoder", RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	SmartDashboard.putNumber("Right Encoder", RobotMap.driveTrainRightDriveEncoder.getDistance());
    	SmartDashboard.putNumber(   "IMU_Yaw",              RobotMap.navx.getYaw());
        
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	//CheckPDP();
    	//System.out.println("Left :" + RobotMap.driveTrainLeftDriveEncoder.getDistance());
    	//System.out.println("Right :" + RobotMap.driveTrainRightDriveEncoder.getDistance());
        Scheduler.getInstance().run();
        if(state == RobotState.Robot){
       //currentlimit.Loop();
        }
        
        cycleNum++;
		
		if(cycleNum%20 == 0){
			try {
				log.fileWrite.flush();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		if(state == RobotState.Robot){
		try {
			log.Update(CurrentLimit.wholeCurrent);	
			//System.out.println(2);
				
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		}
			

        
        
		SmartDashboard.putNumber("Intake Speed", intake.getFeedSpeed());
		
        
        /* Display 6-axis Processed Angle Data                                      */
        SmartDashboard.putBoolean(  "IMU_Connected",        RobotMap.navx.isConnected());
        SmartDashboard.putBoolean(  "IMU_MagneticDisturbance",    RobotMap.navx.isMagneticDisturbance());
        SmartDashboard.putNumber(   "IMU_Yaw",              RobotMap.navx.getYaw());
        SmartDashboard.putNumber(   "IMU_Pitch",            RobotMap.navx.getPitch());
        SmartDashboard.putNumber(   "IMU_Roll",             RobotMap.navx.getRoll());
        
        /* Display tilt-corrected, Magnetometer-based heading (requires             */
        /* magnetometer calibration to be useful)                                   */
        
        SmartDashboard.putNumber(   "IMU_CompassHeading",   RobotMap.navx.getCompassHeading());
        
        /* Display 9-axis Heading (requires magnetometer calibration to be useful)  */
        SmartDashboard.putNumber(   "IMU_FusedHeading",     RobotMap.navx.getFusedHeading());

        /* These functions are compatible w/the WPI Gyro Class, providing a simple  */
        /* path for upgrading from the Kit-of-Parts gyro to the navx MXP            */
        
        SmartDashboard.putNumber(   "IMU_TotalYaw",         RobotMap.navx.getAngle());
        SmartDashboard.putNumber(   "IMU_YawRateDPS",       RobotMap.navx.getRate());

       
    }
    
    public void testInit(){
    	LiveWindow.run();
    }

    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void setAutoMode () {
    	// Read the switch autonomous switches & set auto mode
    	int automode = 2;
    	/*
    	if (Robot.oi.autoA.get()) {
    		automode += 1;
    	}
    	if (Robot.oi.autoB.get()) {
    		automode += 2;
    	}
    	if (Robot.oi.autoC.get()) {
    		automode += 4;
    	}
    	*/
    	
    	autoCommandNum = automode;
    	
    	switch (automode) {
    		case 0:	autonomousCommand = new AutoRightGear();
    				autoName = "Stand Still";
    				break;
    		case 1: autonomousCommand = new DriveTurn(145, 1.5);
    				autoName = "Move Forward";
    				break;
    		case 2: //autonomousCommand = new DriveTurn((vision.getHeading()), 2.0);
					autoName = "Move over BD";
					break;
    		case 3: //autonomousCommand = new AutoLowBar();
					autoName = "Move through Low Bar";
					break;
    		case 4: //autonomousCommand = new AutoPort();
    				autoName = "Move through Portcullis";
    				break;
    		case 5:	//autonomousCommand = new AutoISurrender();
    				autoName = "Move through CDF";
    				break;
    		case 6: //autonomousCommand = new AutoMoat();
    				autoName = "Charge Past Moat";
    		default: //autonomousCommand = new AutoNothing();
    				autoName = "Default Do Nothing";
    				break;
    	}	
    }
    
    public void CheckPDP(){
    	double current=0;
    	double secCurPort=0;
    	double maxCurPort=0;
    	for(int i=1; i<=15; i++){
    		port = i;
    		current = pdp.getCurrent(i);
    		if(current > maxCurrent){
    			secCurrent = maxCurrent;
    			secCurPort = maxCurPort;
    			maxCurrent = current;
    			maxCurPort = port;
    		} else if(current > secCurrent){
    			secCurrent = current;
    			secCurPort = maxCurPort;
    		}
    	}
    	System.out.println("top current: " + maxCurrent + "Port" + maxCurPort);
    	System.out.println("second current: " + secCurrent + "Port" + secCurPort);
    }
}
