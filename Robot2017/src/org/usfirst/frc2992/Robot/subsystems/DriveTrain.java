// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot.subsystems;

import org.usfirst.frc.frc2992.MyRobot.lib.mhJoystick;
import org.usfirst.frc.frc2992.MyRobot.lib.mhRobotDrive;
import org.usfirst.frc2992.Robot.Constants;
import org.usfirst.frc2992.Robot.Robot;
import org.usfirst.frc2992.Robot.RobotMap;
import org.usfirst.frc2992.Robot.commands.*;

import com.kauailabs.navx.frc.AHRS;

import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.TalonSRX;

import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class DriveTrain extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private final mhRobotDrive drivelib = Robot.drivelib;
    private final SpeedController l2Motor = RobotMap.driveTrainL2Motor;
    private final SpeedController l1Motor = RobotMap.driveTrainL1Motor;
    private final SpeedController l3Motor = RobotMap.driveTrainL3Motor;
    private final SpeedController r1Motor = RobotMap.driveTrainR1Motor;
    private final SpeedController r2Motor = RobotMap.driveTrainR2Motor;
    private final SpeedController r3Motor = RobotMap.driveTrainR3Motor;
    private final Encoder leftDriveEncoder = RobotMap.driveTrainLeftDriveEncoder;
    private final Encoder rightDriveEncoder = RobotMap.driveTrainRightDriveEncoder; 
    private final Solenoid driveShfitHL = RobotMap.driveTrainDriveShfitHL;  
    //private final AHRS Gyro;
    public double constant = 0.05;
    public double motorOffset = 0;
   
    public final AHRS navx = RobotMap.navx;
    
    PIDController lDistPID, rDistPID;
    
    DrivePID lDistance, rDistance;
    
    final double dkp = .1;
    final double dki = .05;
    final double dkd = .05;
    
   
    
    RotatePID lTurn;
    RotatePID rTurn;
    
    PIDController lTurnPID;
    PIDController rTurnPID;
    
    final double rkp = 1/90;
    final double rki = 0;
    final double rkd = 0;
    


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
    	
    	setDefaultCommand(new DriveSticks());
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    
    public DriveTrain(){
    	
    	lDistance = new DrivePID(RobotMap.leftmotors);
    	lDistPID = new PIDController(dkp, dki, dkd, leftDriveEncoder, lDistance);
    	lDistPID.setOutputRange(-0.5, 0.5);
    	lDistPID.setInputRange(-240.0, 240.0);
    	lDistPID.setPercentTolerance(1.0);
    	lDistPID.disable();

    	
    	rDistance = new DrivePID(RobotMap.rightmotors);
    	rDistPID = new PIDController(dkp, dki, dkd, rightDriveEncoder, rDistance);
    	rDistPID.setOutputRange(-0.5, 0.5);
    	rDistPID.setInputRange(-240.0, 240.0);
    	rDistPID.setPercentTolerance(1.0);
    	rDistPID.disable();

    	//check before adding again. robot dislikes
    	lTurn = new RotatePID(this.drivelib.leftDriveMotors);
    	lTurnPID = new PIDController(rkp, rki, rkd, navx, lTurn);
    	lTurnPID.setOutputRange(-0.5, 0.5);
    	lTurnPID.setInputRange(-360.0, 360.0);
    	lTurnPID.setContinuous();
    	lTurnPID.setAbsoluteTolerance(3);
    	lTurnPID.disable();
    	
    	rTurn = new RotatePID(this.drivelib.rightDriveMotors);
    	rTurnPID = new PIDController(rkp, rki, rkd, navx, rTurn);
        rTurnPID.setInputRange(-360.0, 360.0);
        rTurnPID.setContinuous();
    	rTurnPID.setAbsoluteTolerance(3);
    	rTurnPID.disable();
    	
    }

    	
    	
    
    
    public void tankDrive(mhJoystick leftjoy, mhJoystick rightjoy){
    	if(leftjoy.smoothGetY()>0 && rightjoy.smoothGetY()>0){
    		drivelib.tankDrive(leftjoy.smoothGetY()-motorOffset, rightjoy.smoothGetY()-motorOffset);
    	}else if(leftjoy.smoothGetY()<0 && rightjoy.smoothGetY()<0){
    		drivelib.tankDrive(leftjoy.smoothGetY()+motorOffset, rightjoy.smoothGetY()+motorOffset);
    	}else if(leftjoy.smoothGetY()<0 && rightjoy.smoothGetY()>0){
    		drivelib.tankDrive(leftjoy.smoothGetY()+motorOffset, rightjoy.smoothGetY()-motorOffset);
    	}else if(leftjoy.smoothGetY()>0 && rightjoy.smoothGetY()<0){
    		drivelib.tankDrive(leftjoy.smoothGetY()-motorOffset, rightjoy.smoothGetY()+motorOffset);
    	} else{ drivelib.tankDrive(leftjoy.smoothGetY(), rightjoy.smoothGetY());
    	}
    	
    }
    
    public void tankDriveReverse(mhJoystick leftjoy, mhJoystick rightjoy){
    	if(leftjoy.smoothGetY()>0 && rightjoy.smoothGetY()>0){
    		drivelib.tankDriveRev(leftjoy.smoothGetY()-motorOffset, rightjoy.smoothGetY()-motorOffset);
    	}else if(leftjoy.smoothGetY()<0 && rightjoy.smoothGetY()<0){
    		drivelib.tankDriveRev(leftjoy.smoothGetY()+motorOffset, rightjoy.smoothGetY()+motorOffset);
    	}else if(leftjoy.smoothGetY()<0 && rightjoy.smoothGetY()>0){
    		drivelib.tankDriveRev(leftjoy.smoothGetY()+motorOffset, rightjoy.smoothGetY()-motorOffset);
    	}else if(leftjoy.smoothGetY()>0 && rightjoy.smoothGetY()<0){
    		drivelib.tankDriveRev(leftjoy.smoothGetY()-motorOffset, rightjoy.smoothGetY()+motorOffset);
    	} else{ drivelib.tankDriveRev(leftjoy.smoothGetY(), rightjoy.smoothGetY());
    	}
    	
    	
    }
    
    public void SmartDriveDist(double distance){
    	//drivelib.smartDrive(distance, 0, lDistPID, rDistPID);
    	lDistPID.setSetpoint(distance);
    	rDistPID.setSetpoint(-distance);
    	lDistPID.enable();
    	rDistPID.enable();
    }
    
    public void SmartDriveRot(double degrees){
    	drivelib.smartDrive(0, degrees, lTurnPID, rTurnPID);
    }
    
    public void ArcadeDrive(double move, double rotate){
    	drivelib.arcadeDrive(move, rotate);
    	
    }
    
    public void ArcadeDrive(mhJoystick leftJoy, mhJoystick rightJoy){
    	lDistPID.disable();
    	rDistPID.disable();
    	drivelib.arcadeDrive(rightJoy.smoothGetY()*.4, leftJoy.smoothGetX()*.4);
    }
    
    public void tankDriveAuto(double left, double right){
    	drivelib.tankDrive(left, right);
    }
    
    public void motorStop(){
    	drivelib.stopMotor();
    }
    public void MotorOffset(){
    	motorOffset = Robot.currentlimit.Counter * constant;
    }
  
}

