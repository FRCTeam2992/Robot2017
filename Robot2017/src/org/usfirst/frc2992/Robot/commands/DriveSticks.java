// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.Robot.commands;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc.frc2992.MyRobot.lib.mhJoystick;
import org.usfirst.frc2992.Robot.OI;
import org.usfirst.frc2992.Robot.Robot;
import org.usfirst.frc2992.Robot.RobotMap;

/**
 *
 */
public class DriveSticks extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public mhJoystick leftJoy;
	public mhJoystick rightJoy;
	
	public double offset = .45;
	public double counter = 0;
	
    public DriveSticks() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    protected void initialize() {
    	this.setInterruptible(true);
    	
    	Robot.driveTrain.motorStop();
    }

    // Called repeatedly when this Command is scheduled to run
    protected void execute() {
    	counter++;
    	
    	leftJoy = Robot.oi.getLeftJoy();
    	rightJoy = Robot.oi.getRightJoy();
    	
    	if(Robot.oi.getRightJoy().getTrigger()){
    		RobotMap.driveTrainDriveShfitHL.set(false);
    		
    	} else {
    		RobotMap.driveTrainDriveShfitHL.set(true);
    	}
    	
    	/*
    	 * not sure if I like this yet -- designed to help avoid hitting middle spoke of gear on peg
    	 */
    	if(Robot.oi.getLeftJoy().getTrigger()){
    		if(Robot.driveTrain.isTankDrive()){
    			Robot.driveTrain.tankDriveAuto(-leftJoy.smoothGetY() + offset, -rightJoy.smoothGetY() - offset);
    			offset = -offset;
    		} else {
    			Robot.driveTrain.ArcadeDrive(-rightJoy.smoothGetY(), leftJoy.smoothGetX() + offset);
    			offset = -offset;
    	}
    		
    		
    	} else {
    		if(Robot.driveTrain.isTankDrive()){
        		Robot.driveTrain.tankDrive(leftJoy, rightJoy);
        	} else {
        		Robot.driveTrain.ArcadeDrive(leftJoy, rightJoy);
        	}
    	}
    	
    	if(Robot.oi.getLeftJoy().getRawButton(5)){
    		Robot.driveTrain.setTankDrive(true);
    	}
    	if(Robot.oi.getLeftJoy().getRawButton(6)){
    		Robot.driveTrain.setTankDrive(false);
    	}
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    protected void interrupted() {
    }
}
