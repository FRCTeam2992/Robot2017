// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2992.MyRobot;

import org.usfirst.frc2992.MyRobot.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc2992.MyRobot.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick leftJoy;
    public Joystick rightJoy;
    public JoystickButton intakeForwardOff;
    public JoystickButton intakeBackwardOff;
    public JoystickButton climbOnOff;
    public JoystickButton rampUpAuto;
    public JoystickButton rampDownAuto;
    public JoystickButton deliverNot;
    public JoystickButton dropGear;
    public JoystickButton secretWeapon;
    public Joystick buttomBox;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        buttomBox = new Joystick(2);
        
        secretWeapon = new JoystickButton(buttomBox, 8);
        secretWeapon.whileHeld(new GearPos4());
        dropGear = new JoystickButton(buttomBox, 7);
        dropGear.whileHeld(new GearPos4());
        deliverNot = new JoystickButton(buttomBox, 6);
        deliverNot.whileHeld(new GearPos3());
        rampDownAuto = new JoystickButton(buttomBox, 5);
        rampDownAuto.whileHeld(new GearPos1());
        rampUpAuto = new JoystickButton(buttomBox, 4);
        rampUpAuto.whileHeld(new GearPos2());
        climbOnOff = new JoystickButton(buttomBox, 3);
        climbOnOff.whileHeld(new ClimbUp());
        intakeBackwardOff = new JoystickButton(buttomBox, 2);
        intakeBackwardOff.whileHeld(new FeedWheelsInStop());
        intakeForwardOff = new JoystickButton(buttomBox, 1);
        intakeForwardOff.whileHeld(new FeedWheelsInStop());
        rightJoy = new Joystick(0);
        
        leftJoy = new Joystick(1);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("DriveSticks", new DriveSticks());
        SmartDashboard.putData("ClimbUp", new ClimbUp());
        SmartDashboard.putData("ClimbStop", new ClimbStop());
        SmartDashboard.putData("GearPos1", new GearPos1());
        SmartDashboard.putData("GearPos2", new GearPos2());
        SmartDashboard.putData("GearPos3", new GearPos3());
        SmartDashboard.putData("GearPos4", new GearPos4());
        SmartDashboard.putData("FeedWheelsInStop", new FeedWheelsInStop());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getLeftJoy() {
        return leftJoy;
    }

    public Joystick getRightJoy() {
        return rightJoy;
    }

    public Joystick getButtomBox() {
        return buttomBox;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

